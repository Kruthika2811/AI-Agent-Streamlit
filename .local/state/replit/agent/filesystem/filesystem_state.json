{"file_contents":{"auto_demo.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nAutomatic demo of the Voice Assistant - no input required\n\"\"\"\n\nimport time\nfrom voice_assistant.command_processor import CommandProcessor\n\nclass SilentTTS:\n    \"\"\"Silent TTS handler for demo purposes\"\"\"\n    def speak(self, text):\n        print(f\"üîä Assistant: {text}\")\n\ndef run_auto_demo():\n    \"\"\"Run automatic demonstration of all features\"\"\"\n    print(\"=\" * 60)\n    print(\"üé§ VOICE ASSISTANT - AUTOMATIC DEMONSTRATION\")\n    print(\"=\" * 60)\n    \n    # Initialize with silent TTS\n    tts = SilentTTS()\n    processor = CommandProcessor(tts)\n    \n    # Demo commands\n    demo_commands = [\n        (\"what time is it\", \"Getting current time\"),\n        (\"what date is it\", \"Getting current date\"),\n        (\"search wikipedia for python programming\", \"Searching Wikipedia\"),\n        (\"open google\", \"Opening website\"),\n        (\"hello\", \"Basic greeting\"),\n        (\"help\", \"Showing help information\")\n    ]\n    \n    print(\"Demonstrating voice assistant capabilities:\\n\")\n    \n    for i, (command, description) in enumerate(demo_commands, 1):\n        print(f\"{i}. {description}\")\n        print(f\"   Command: '{command}'\")\n        \n        try:\n            response = processor.process_command(command)\n            print(f\"   üîä Assistant: {response}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        print()  # Empty line for readability\n        time.sleep(0.5)  # Brief pause between commands\n    \n    print(\"=\" * 60)\n    print(\"‚úÖ DEMONSTRATION COMPLETE!\")\n    print(\"=\" * 60)\n    print(\"\\nYour Voice Assistant features:\")\n    print(\"‚úì Speech recognition (speech_recognition library)\")\n    print(\"‚úì Text-to-speech responses (pyttsx3)\")\n    print(\"‚úì Wake word detection\")\n    print(\"‚úì Time and date queries\")\n    print(\"‚úì Wikipedia searches\")\n    print(\"‚úì Website opening commands\")\n    print(\"‚úì Basic conversation handling\")\n    print(\"‚úì Help system\")\n    print(\"\\nüöÄ Voice Assistant is ready for use!\")\n    print(\"   - Use main.py for full voice interaction (on local machine)\")\n    print(\"   - Use demo_mode.py for interactive text testing\")\n\nif __name__ == \"__main__\":\n    run_auto_demo()","size_bytes":2179},"config.py":{"content":"\"\"\"\nConfiguration settings for the Voice Assistant\n\"\"\"\n\nclass Config:\n    # Wake words that activate the assistant\n    WAKE_WORDS = [\n        \"hello assistant\",\n        \"hey assistant\", \n        \"hi assistant\",\n        \"wake up assistant\",\n        \"assistant\"\n    ]\n    \n    # Commands to exit the application\n    EXIT_COMMANDS = [\n        \"exit\",\n        \"quit\", \n        \"goodbye\",\n        \"stop assistant\",\n        \"shut down\",\n        \"turn off\"\n    ]\n    \n    # Speech recognition settings\n    SPEECH_TIMEOUT = 1  # Time to wait for speech to start\n    PHRASE_TIME_LIMIT = 5  # Maximum time to record speech\n    \n    # TTS settings\n    TTS_RATE = 180  # Words per minute\n    TTS_VOLUME = 0.9  # Volume level (0.0 to 1.0)\n    \n    # Wikipedia settings\n    WIKIPEDIA_SENTENCES = 2  # Number of sentences in summary\n    \n    # Common website mappings for easier voice recognition\n    WEBSITE_SHORTCUTS = {\n        'google': 'https://www.google.com',\n        'youtube': 'https://www.youtube.com',\n        'facebook': 'https://www.facebook.com',\n        'twitter': 'https://www.twitter.com',\n        'instagram': 'https://www.instagram.com',\n        'linkedin': 'https://www.linkedin.com',\n        'github': 'https://www.github.com',\n        'reddit': 'https://www.reddit.com',\n        'amazon': 'https://www.amazon.com',\n        'wikipedia': 'https://www.wikipedia.org',\n        'gmail': 'https://mail.google.com',\n    }\n    \n    # Error messages\n    ERROR_MESSAGES = {\n        'mic_error': \"I'm having trouble accessing your microphone. Please check your audio settings.\",\n        'speech_error': \"I couldn't understand what you said. Please try speaking more clearly.\",\n        'internet_error': \"I need an internet connection for that feature.\",\n        'general_error': \"Sorry, I encountered an unexpected error.\"\n    }\n    \n    # Success messages\n    SUCCESS_MESSAGES = {\n        'startup': \"Voice Assistant is ready. Say 'hello assistant' to wake me up.\",\n        'wake': \"Yes, how can I help you?\",\n        'goodbye': \"Goodbye! Have a great day!\"\n    }\n","size_bytes":2061},"demo_mode.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDemo mode for the Voice Assistant (text-based simulation)\nThis demonstrates all the functionality without requiring audio hardware\n\"\"\"\n\nimport sys\nfrom voice_assistant.command_processor import CommandProcessor\nfrom voice_assistant.tts_handler import TTSHandler\n\nclass DemoVoiceAssistant:\n    def __init__(self):\n        \"\"\"Initialize the demo voice assistant\"\"\"\n        print(\"Initializing Demo Voice Assistant...\")\n        \n        try:\n            self.tts = TTSHandler()\n            self.processor = CommandProcessor(self.tts)\n            self.running = False\n            \n            print(\"Demo Voice Assistant initialized successfully!\")\n            print(\"This demo simulates voice commands through text input.\")\n            \n        except Exception as e:\n            print(f\"Error initializing Demo Voice Assistant: {e}\")\n            # Continue without TTS if it fails\n            self.tts = None\n            self.processor = CommandProcessor(None)\n    \n    def simulate_speech(self, text):\n        \"\"\"Simulate TTS output\"\"\"\n        print(f\"üîä Assistant says: {text}\")\n        if self.tts:\n            try:\n                self.tts.speak(text)\n            except:\n                pass  # Continue without audio if TTS fails\n    \n    def handle_command(self, command):\n        \"\"\"Handle a text command\"\"\"\n        try:\n            print(f\"Processing command: {command}\")\n            response = self.processor.process_command(command)\n            if response:\n                self.simulate_speech(response)\n            else:\n                self.simulate_speech(\"I didn't understand that command.\")\n                \n        except Exception as e:\n            print(f\"Error handling command: {e}\")\n            self.simulate_speech(\"Sorry, I encountered an error processing your command.\")\n    \n    def start_demo(self):\n        \"\"\"Start the demo mode\"\"\"\n        print(\"=\" * 60)\n        print(\"üé§ VOICE ASSISTANT DEMO MODE\")\n        print(\"=\" * 60)\n        print(\"Available commands:\")\n        print(\"- 'what time is it' - Get current time\")\n        print(\"- 'what date is it' - Get current date\") \n        print(\"- 'search wikipedia for [topic]' - Wikipedia search\")\n        print(\"- 'open [website]' - Open websites\")\n        print(\"- 'hello' - Greeting\")\n        print(\"- 'help' - Show available commands\")\n        print(\"- 'exit' - Stop the demo\")\n        print(\"=\" * 60)\n        \n        self.simulate_speech(\"Hello! I'm your voice assistant. Type your commands below.\")\n        \n        self.running = True\n        \n        while self.running:\n            try:\n                # Get text input instead of voice\n                user_input = input(\"\\nüí¨ You: \").strip()\n                \n                if not user_input:\n                    continue\n                \n                # Check for exit commands\n                if user_input.lower() in ['exit', 'quit', 'goodbye', 'stop']:\n                    self.simulate_speech(\"Goodbye! Thanks for trying the voice assistant demo!\")\n                    self.running = False\n                    break\n                \n                # Process the command\n                self.handle_command(user_input)\n                \n            except KeyboardInterrupt:\n                print(\"\\n\\nShutting down demo...\")\n                self.simulate_speech(\"Goodbye!\")\n                self.running = False\n                break\n            except Exception as e:\n                print(f\"Error in demo: {e}\")\n\ndef main():\n    \"\"\"Main function to run the demo\"\"\"\n    demo = DemoVoiceAssistant()\n    demo.start_demo()\n\nif __name__ == \"__main__\":\n    main()","size_bytes":3635},"main.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nMain entry point for the Python Voice Assistant\n\"\"\"\n\nimport sys\nimport time\nimport threading\nfrom voice_assistant.speech_handler import SpeechHandler\nfrom voice_assistant.command_processor import CommandProcessor\nfrom voice_assistant.tts_handler import TTSHandler\nfrom config import Config\n\nclass VoiceAssistant:\n    def __init__(self):\n        \"\"\"Initialize the voice assistant with all necessary components\"\"\"\n        print(\"Initializing Voice Assistant...\")\n        \n        try:\n            self.tts = TTSHandler()\n            self.speech = SpeechHandler()\n            self.processor = CommandProcessor(self.tts)\n            self.running = False\n            \n            print(\"Voice Assistant initialized successfully!\")\n            self.tts.speak(\"Voice Assistant is ready. Say 'hello assistant' to wake me up.\")\n            \n        except Exception as e:\n            print(f\"Error initializing Voice Assistant: {e}\")\n            sys.exit(1)\n    \n    def listen_for_wake_word(self):\n        \"\"\"Listen for the wake word to activate the assistant\"\"\"\n        wake_words = Config.WAKE_WORDS\n        \n        while self.running:\n            try:\n                print(\"Listening for wake word...\")\n                audio = self.speech.listen(timeout=1, phrase_time_limit=3)\n                \n                if audio:\n                    text = self.speech.recognize(audio)\n                    if text:\n                        text_lower = text.lower()\n                        print(f\"Heard: {text}\")\n                        \n                        # Check for wake words\n                        for wake_word in wake_words:\n                            if wake_word in text_lower:\n                                print(\"Wake word detected!\")\n                                self.tts.speak(\"Yes, how can I help you?\")\n                                self.handle_command()\n                                break\n                        \n                        # Check for exit commands\n                        if any(exit_word in text_lower for exit_word in Config.EXIT_COMMANDS):\n                            self.tts.speak(\"Goodbye!\")\n                            self.stop()\n                            break\n                            \n            except KeyboardInterrupt:\n                print(\"\\nShutting down...\")\n                self.stop()\n                break\n            except Exception as e:\n                print(f\"Error in wake word detection: {e}\")\n                time.sleep(1)\n    \n    def handle_command(self):\n        \"\"\"Handle a command after wake word is detected\"\"\"\n        try:\n            print(\"Listening for command...\")\n            audio = self.speech.listen(timeout=5, phrase_time_limit=5)\n            \n            if audio:\n                command = self.speech.recognize(audio)\n                if command:\n                    print(f\"Command received: {command}\")\n                    response = self.processor.process_command(command)\n                    if response:\n                        self.tts.speak(response)\n                else:\n                    self.tts.speak(\"I didn't catch that. Could you repeat?\")\n            else:\n                self.tts.speak(\"I didn't hear anything. Try again.\")\n                \n        except Exception as e:\n            print(f\"Error handling command: {e}\")\n            self.tts.speak(\"Sorry, I encountered an error processing your command.\")\n    \n    def start(self):\n        \"\"\"Start the voice assistant\"\"\"\n        print(\"Starting Voice Assistant...\")\n        self.running = True\n        \n        try:\n            self.listen_for_wake_word()\n        except KeyboardInterrupt:\n            print(\"\\nShutting down...\")\n        finally:\n            self.stop()\n    \n    def stop(self):\n        \"\"\"Stop the voice assistant\"\"\"\n        self.running = False\n        print(\"Voice Assistant stopped.\")\n\ndef main():\n    \"\"\"Main function to run the voice assistant\"\"\"\n    print(\"=\" * 50)\n    print(\"Python Voice Assistant\")\n    print(\"=\" * 50)\n    print(\"Commands:\")\n    print(\"- 'hello assistant' or 'hey assistant' to wake up\")\n    print(\"- 'what time is it' for current time\")\n    print(\"- 'search wikipedia for [topic]' for Wikipedia search\")\n    print(\"- 'open [website]' to open websites\")\n    print(\"- 'exit' or 'quit' to stop\")\n    print(\"=\" * 50)\n    \n    assistant = VoiceAssistant()\n    assistant.start()\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":4446},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"pyaudio>=0.2.14\",\n    \"pyttsx3>=2.99\",\n    \"speechrecognition>=3.14.3\",\n    \"wikipedia-api>=0.8.1\",\n    \"wikipedia>=1.4.0\",\n    \"flask>=3.1.1\",\n]\n","size_bytes":293},"replit.md":{"content":"# Overview\n\nThis is a Python Voice Assistant application that provides hands-free interaction through voice commands. The assistant listens for wake words, processes spoken commands, and responds using text-to-speech. It supports various functionalities including time/date queries, Wikipedia searches, web browsing, and basic conversational interactions.\n\n**Recent Addition (August 2025):** Added a modern web interface that allows users to interact with the voice assistant through a chat-style web application, making it accessible without requiring microphone hardware.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Core Components\n\nThe application follows a modular architecture with clear separation of concerns:\n\n**Main Controller (`main.py`)**\n- Entry point that orchestrates all components\n- Manages the main listening loop and wake word detection\n- Handles application lifecycle and error recovery\n\n**Web Interface (`web_app.py`)**\n- Flask-based web application providing chat-style interface\n- Real-time message processing with AJAX\n- Mobile-responsive design with quick command buttons\n- Conversation history and clear functionality\n\n**Speech Recognition (`speech_handler.py`)**\n- Uses the `speech_recognition` library for audio input processing\n- Implements ambient noise adjustment for better accuracy\n- Configurable timeout and phrase limits for responsive interaction\n\n**Text-to-Speech (`tts_handler.py`)**\n- Powered by `pyttsx3` for cross-platform speech synthesis\n- Supports voice customization (prefers female voices)\n- Implements queued speech processing to prevent overlapping audio\n\n**Command Processing (`command_processor.py`)**\n- Pattern-based command recognition using regular expressions\n- Modular command handlers for different functionality types\n- Extensible architecture for adding new command categories\n\n**Configuration Management (`config.py`)**\n- Centralized configuration for wake words, exit commands, and system settings\n- Website shortcuts for easy voice-controlled web browsing\n- Tunable parameters for speech recognition and TTS\n\n## Design Patterns\n\n**Command Pattern**: Each voice command type has dedicated handlers that can be easily extended or modified.\n\n**Observer Pattern**: The main loop continuously listens for wake words and triggers appropriate responses.\n\n**Configuration Pattern**: All system settings are externalized to a single configuration file for easy customization.\n\n## Threading Model\n\nThe application uses threading to handle concurrent operations:\n- Main thread manages the wake word listening loop\n- TTS operations run in separate threads to prevent blocking\n- Speech recognition operates synchronously within the main flow\n\n# External Dependencies\n\n## Core Libraries\n- **speech_recognition**: Primary library for converting speech to text\n- **pyttsx3**: Cross-platform text-to-speech synthesis engine\n- **wikipedia**: API integration for knowledge queries and summaries\n\n## System Dependencies\n- **Microphone access**: Requires system microphone permissions\n- **Audio output**: Needs functioning speakers or headphones for TTS\n- **Internet connectivity**: Required for Wikipedia searches and web browsing commands\n\n## Optional Integrations\n- **Web browser**: Uses system default browser for web navigation commands\n- **Operating system services**: Leverages OS-level audio and hardware interfaces\n\nThe application is designed to be lightweight and self-contained, with minimal external service dependencies beyond the core Python libraries.","size_bytes":3568},"test_assistant.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest script to demonstrate the voice assistant functionality\n\"\"\"\n\nfrom voice_assistant.command_processor import CommandProcessor\nfrom voice_assistant.tts_handler import TTSHandler\n\ndef test_voice_assistant():\n    \"\"\"Test the voice assistant with sample commands\"\"\"\n    print(\"=\" * 50)\n    print(\"TESTING VOICE ASSISTANT FUNCTIONALITY\")\n    print(\"=\" * 50)\n    \n    try:\n        # Initialize components\n        print(\"Initializing TTS handler...\")\n        tts = TTSHandler()\n        \n        print(\"Initializing command processor...\")\n        processor = CommandProcessor(tts)\n        \n        # Test commands\n        test_commands = [\n            \"what time is it\",\n            \"what date is it\",\n            \"search wikipedia for artificial intelligence\",\n            \"open google\",\n            \"hello\",\n            \"help\"\n        ]\n        \n        print(\"\\nTesting commands:\")\n        print(\"-\" * 30)\n        \n        for i, command in enumerate(test_commands, 1):\n            print(f\"\\n{i}. Testing: '{command}'\")\n            try:\n                response = processor.process_command(command)\n                print(f\"   Response: {response}\")\n                \n                # Simulate TTS (without audio in cloud environment)\n                print(f\"   üîä Speaking: {response[:100]}{'...' if len(response) > 100 else ''}\")\n                \n            except Exception as e:\n                print(f\"   Error: {e}\")\n        \n        print(\"\\n\" + \"=\" * 50)\n        print(\"VOICE ASSISTANT TEST COMPLETED SUCCESSFULLY!\")\n        print(\"=\" * 50)\n        print(\"\\nFeatures working:\")\n        print(\"‚úì Command processing\")\n        print(\"‚úì Time and date queries\")\n        print(\"‚úì Wikipedia searches\")\n        print(\"‚úì Website opening commands\")\n        print(\"‚úì Basic conversation\")\n        print(\"‚úì Help system\")\n        print(\"\\nThe voice assistant is ready for use!\")\n        \n    except Exception as e:\n        print(f\"Error during testing: {e}\")\n\nif __name__ == \"__main__\":\n    test_voice_assistant()","size_bytes":2046},"web_app.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nWeb interface for the Voice Assistant\nProvides a clean web UI for text-based interaction\n\"\"\"\n\nfrom flask import Flask, render_template, request, jsonify\nimport json\nfrom voice_assistant.command_processor import CommandProcessor\nfrom voice_assistant.tts_handler import TTSHandler\nimport datetime\n\napp = Flask(__name__)\n\nclass WebTTSHandler:\n    \"\"\"TTS handler for web interface - returns text instead of speaking\"\"\"\n    def speak(self, text):\n        return text\n\nclass WebVoiceAssistant:\n    def __init__(self):\n        \"\"\"Initialize the web voice assistant\"\"\"\n        try:\n            self.tts = WebTTSHandler()\n            self.processor = CommandProcessor(self.tts)\n            self.conversation_history = []\n        except Exception as e:\n            print(f\"Error initializing Web Voice Assistant: {e}\")\n            raise\n\n    def process_message(self, user_input):\n        \"\"\"Process user input and return response\"\"\"\n        if not user_input or not user_input.strip():\n            return \"Please say something!\"\n        \n        try:\n            # Add user message to history\n            timestamp = datetime.datetime.now().strftime(\"%H:%M:%S\")\n            self.conversation_history.append({\n                'type': 'user',\n                'message': user_input,\n                'timestamp': timestamp\n            })\n            \n            # Process the command\n            response = self.processor.process_command(user_input)\n            \n            # Add assistant response to history\n            self.conversation_history.append({\n                'type': 'assistant',\n                'message': response,\n                'timestamp': timestamp\n            })\n            \n            return response\n            \n        except Exception as e:\n            error_msg = f\"Sorry, I encountered an error: {str(e)}\"\n            self.conversation_history.append({\n                'type': 'assistant',\n                'message': error_msg,\n                'timestamp': timestamp\n            })\n            return error_msg\n\n# Initialize the assistant\nassistant = WebVoiceAssistant()\n\n@app.route('/')\ndef index():\n    \"\"\"Main page\"\"\"\n    return render_template('index.html')\n\n@app.route('/chat', methods=['POST'])\ndef chat():\n    \"\"\"Handle chat messages\"\"\"\n    try:\n        data = request.get_json()\n        user_input = data.get('message', '').strip()\n        \n        if not user_input:\n            return jsonify({'error': 'No message provided'}), 400\n        \n        response = assistant.process_message(user_input)\n        \n        return jsonify({\n            'response': response,\n            'timestamp': datetime.datetime.now().strftime(\"%H:%M:%S\")\n        })\n        \n    except Exception as e:\n        return jsonify({'error': f'Server error: {str(e)}'}), 500\n\n@app.route('/history')\ndef history():\n    \"\"\"Get conversation history\"\"\"\n    return jsonify({'history': assistant.conversation_history})\n\n@app.route('/clear')\ndef clear_history():\n    \"\"\"Clear conversation history\"\"\"\n    assistant.conversation_history = []\n    return jsonify({'status': 'cleared'})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)","size_bytes":3184},"voice_assistant/__init__.py":{"content":"\"\"\"\nVoice Assistant Package\nContains modules for speech recognition, text-to-speech, and command processing\n\"\"\"\n\n__version__ = \"1.0.0\"\n__author__ = \"Voice Assistant\"\n","size_bytes":166},"voice_assistant/command_processor.py":{"content":"\"\"\"\nCommand Processor Module\nHandles parsing and execution of voice commands\n\"\"\"\n\nimport datetime\nimport webbrowser\nimport wikipedia\nimport re\nimport os\n\nclass CommandProcessor:\n    def __init__(self, tts_handler):\n        \"\"\"\n        Initialize the command processor\n        \n        Args:\n            tts_handler: TTS handler instance for speaking responses\n        \"\"\"\n        self.tts = tts_handler\n        \n        # Command patterns and their handlers\n        self.command_patterns = {\n            'time': [r'what time is it', r'tell me the time', r'current time', r'time'],\n            'date': [r'what date is it', r'tell me the date', r'current date', r'date', r'what day is it'],\n            'wikipedia': [r'search wikipedia for (.+)', r'wikipedia (.+)', r'look up (.+)', r'tell me about (.+)'],\n            'web': [r'open (.+)', r'go to (.+)', r'browse (.+)', r'visit (.+)'],\n            'greeting': [r'hello', r'hi', r'hey', r'good morning', r'good afternoon', r'good evening'],\n            'help': [r'help', r'what can you do', r'commands', r'assistance'],\n            'weather': [r'weather', r'temperature', r'forecast'],\n        }\n    \n    def process_command(self, command):\n        \"\"\"\n        Process a voice command and return appropriate response\n        \n        Args:\n            command: Voice command string to process\n            \n        Returns:\n            Response string to be spoken\n        \"\"\"\n        if not command:\n            return \"I didn't hear anything.\"\n        \n        command = command.lower().strip()\n        print(f\"Processing command: {command}\")\n        \n        try:\n            # Check each command pattern\n            for command_type, patterns in self.command_patterns.items():\n                for pattern in patterns:\n                    match = re.search(pattern, command)\n                    if match:\n                        return self._execute_command(command_type, match, command)\n            \n            # If no pattern matches, try to be helpful\n            return self._handle_unknown_command(command)\n            \n        except Exception as e:\n            print(f\"Error processing command: {e}\")\n            return \"Sorry, I encountered an error processing your command.\"\n    \n    def _execute_command(self, command_type, match, original_command):\n        \"\"\"Execute a specific command type\"\"\"\n        try:\n            if command_type == 'time':\n                return self._get_time()\n            \n            elif command_type == 'date':\n                return self._get_date()\n            \n            elif command_type == 'wikipedia':\n                query = match.group(1) if match.groups() else original_command.replace('wikipedia', '').strip()\n                return self._search_wikipedia(query)\n            \n            elif command_type == 'web':\n                website = match.group(1) if match.groups() else original_command.replace('open', '').strip()\n                return self._open_website(website)\n            \n            elif command_type == 'greeting':\n                return self._handle_greeting()\n            \n            elif command_type == 'help':\n                return self._get_help()\n            \n            elif command_type == 'weather':\n                return \"I don't have access to weather data yet, but I can help you with time, Wikipedia searches, and opening websites.\"\n            \n            else:\n                return \"I'm not sure how to handle that command.\"\n                \n        except Exception as e:\n            print(f\"Error executing command {command_type}: {e}\")\n            return f\"Sorry, I had trouble with that {command_type} request.\"\n    \n    def _get_time(self):\n        \"\"\"Get current time\"\"\"\n        try:\n            now = datetime.datetime.now()\n            time_str = now.strftime(\"%I:%M %p\")\n            return f\"The current time is {time_str}\"\n        except Exception as e:\n            print(f\"Error getting time: {e}\")\n            return \"Sorry, I couldn't get the current time.\"\n    \n    def _get_date(self):\n        \"\"\"Get current date\"\"\"\n        try:\n            now = datetime.datetime.now()\n            date_str = now.strftime(\"%A, %B %d, %Y\")\n            return f\"Today is {date_str}\"\n        except Exception as e:\n            print(f\"Error getting date: {e}\")\n            return \"Sorry, I couldn't get the current date.\"\n    \n    def _search_wikipedia(self, query):\n        \"\"\"Search Wikipedia for information\"\"\"\n        if not query or query.strip() == \"\":\n            return \"What would you like me to search for on Wikipedia?\"\n        \n        try:\n            print(f\"Searching Wikipedia for: {query}\")\n            \n            # Set language to English\n            wikipedia.set_lang(\"en\")\n            \n            # First try direct search\n            try:\n                summary = wikipedia.summary(query, sentences=2)\n                if summary:\n                    return f\"According to Wikipedia: {summary}\"\n            except wikipedia.exceptions.PageError:\n                # If direct search fails, try searching for similar topics\n                search_results = wikipedia.search(query, results=3)\n                if search_results:\n                    # Try the first search result\n                    summary = wikipedia.summary(search_results[0], sentences=2)\n                    return f\"According to Wikipedia: {summary}\"\n            \n            return f\"I couldn't find information about {query} on Wikipedia.\"\n                \n        except wikipedia.exceptions.DisambiguationError as e:\n            # If there are multiple options, pick the first one\n            try:\n                summary = wikipedia.summary(e.options[0], sentences=2)\n                return f\"I found multiple results. Here's information about {e.options[0]}: {summary}\"\n            except:\n                return f\"I found multiple results for {query}. Could you be more specific?\"\n        \n        except wikipedia.exceptions.PageError:\n            return f\"I couldn't find a Wikipedia page for {query}. Try rephrasing your search.\"\n        \n        except Exception as e:\n            print(f\"Wikipedia search error: {e}\")\n            return f\"Sorry, I had trouble searching Wikipedia for {query}.\"\n    \n    def _open_website(self, website):\n        \"\"\"Open a website in the default browser\"\"\"\n        if not website or website.strip() == \"\":\n            return \"Which website would you like me to open?\"\n        \n        try:\n            # Clean up the website name\n            website = website.strip().lower()\n            \n            # Add common website mappings\n            website_mappings = {\n                'google': 'https://www.google.com',\n                'youtube': 'https://www.youtube.com',\n                'facebook': 'https://www.facebook.com',\n                'twitter': 'https://www.twitter.com',\n                'instagram': 'https://www.instagram.com',\n                'linkedin': 'https://www.linkedin.com',\n                'github': 'https://www.github.com',\n                'reddit': 'https://www.reddit.com',\n                'amazon': 'https://www.amazon.com',\n                'wikipedia': 'https://www.wikipedia.org',\n                'stack overflow': 'https://stackoverflow.com',\n                'gmail': 'https://mail.google.com',\n            }\n            \n            # Check if it's a mapped website\n            if website in website_mappings:\n                url = website_mappings[website]\n            else:\n                # Try to construct URL\n                if not website.startswith(('http://', 'https://')):\n                    if '.' in website:\n                        url = f\"https://{website}\"\n                    else:\n                        url = f\"https://www.{website}.com\"\n                else:\n                    url = website\n            \n            print(f\"Opening website: {url}\")\n            # Note: webbrowser.open() only works in desktop environments\n            # For web interface, we'll return the URL so the frontend can handle it\n            webbrowser.open(url)\n            \n            return f\"Opening {website}: {url}\"\n            \n        except Exception as e:\n            print(f\"Error opening website: {e}\")\n            return f\"Sorry, I couldn't open {website}.\"\n    \n    def _handle_greeting(self):\n        \"\"\"Handle greeting commands\"\"\"\n        greetings = [\n            \"Hello! How can I help you today?\",\n            \"Hi there! What would you like to know?\",\n            \"Hey! I'm here to assist you.\",\n            \"Good to hear from you! What can I do for you?\"\n        ]\n        \n        import random\n        return random.choice(greetings)\n    \n    def _get_help(self):\n        \"\"\"Provide help information\"\"\"\n        help_text = \"\"\"I can help you with several things:\n        - Tell you the current time by saying 'what time is it'\n        - Tell you the current date by saying 'what date is it'\n        - Search Wikipedia by saying 'search wikipedia for' followed by your topic\n        - Open websites by saying 'open' followed by the website name\n        - Just say 'hello assistant' to wake me up anytime\n        \"\"\"\n        return help_text\n    \n    def _handle_unknown_command(self, command):\n        \"\"\"Handle unknown commands with helpful suggestions\"\"\"\n        suggestions = [\n            \"I'm not sure what you mean. Try asking me for the time, searching Wikipedia, or opening a website.\",\n            \"I didn't understand that. I can tell you the time, search Wikipedia, or open websites for you.\",\n            \"Sorry, I don't know how to do that yet. Ask me about the time, Wikipedia, or websites.\",\n        ]\n        \n        import random\n        return random.choice(suggestions)\n","size_bytes":9720},"voice_assistant/speech_handler.py":{"content":"\"\"\"\nSpeech Handler Module\nHandles speech recognition functionality\n\"\"\"\n\nimport speech_recognition as sr\nimport threading\nimport time\n\nclass SpeechHandler:\n    def __init__(self):\n        \"\"\"Initialize the speech recognition system\"\"\"\n        self.recognizer = sr.Recognizer()\n        self.microphone = sr.Microphone()\n        \n        # Adjust for ambient noise\n        print(\"Adjusting for ambient noise... Please wait.\")\n        with self.microphone as source:\n            self.recognizer.adjust_for_ambient_noise(source, duration=2)\n        print(\"Ambient noise adjustment complete.\")\n        \n        # Configure recognition settings\n        self.recognizer.energy_threshold = 300\n        self.recognizer.dynamic_energy_threshold = True\n        self.recognizer.pause_threshold = 0.8\n        self.recognizer.phrase_threshold = 0.3\n        self.recognizer.operation_timeout = 2\n    \n    def listen(self, timeout=1, phrase_time_limit=None):\n        \"\"\"\n        Listen for audio input from the microphone\n        \n        Args:\n            timeout: Time to wait for speech to start\n            phrase_time_limit: Maximum time to record speech\n            \n        Returns:\n            AudioData object or None if no speech detected\n        \"\"\"\n        try:\n            with self.microphone as source:\n                audio = self.recognizer.listen(\n                    source, \n                    timeout=timeout, \n                    phrase_time_limit=phrase_time_limit\n                )\n                return audio\n        except sr.WaitTimeoutError:\n            return None\n        except Exception as e:\n            print(f\"Error listening: {e}\")\n            return None\n    \n    def recognize(self, audio):\n        \"\"\"\n        Convert audio to text using Google Speech Recognition\n        \n        Args:\n            audio: AudioData object to recognize\n            \n        Returns:\n            Recognized text string or None if recognition failed\n        \"\"\"\n        if not audio:\n            return None\n            \n        try:\n            # Use Google Speech Recognition (free tier)\n            text = self.recognizer.recognize_google(audio)\n            return text\n        except sr.UnknownValueError:\n            print(\"Could not understand audio\")\n            return None\n        except sr.RequestError as e:\n            print(f\"Error with speech recognition service: {e}\")\n            return None\n        except Exception as e:\n            print(f\"Error in speech recognition: {e}\")\n            return None\n    \n    def test_microphone(self):\n        \"\"\"Test if microphone is working properly\"\"\"\n        try:\n            print(\"Testing microphone... Say something!\")\n            audio = self.listen(timeout=5, phrase_time_limit=3)\n            if audio:\n                text = self.recognize(audio)\n                if text:\n                    print(f\"Microphone test successful! You said: {text}\")\n                    return True\n                else:\n                    print(\"Microphone detected audio but couldn't recognize speech\")\n                    return False\n            else:\n                print(\"No audio detected. Check your microphone.\")\n                return False\n        except Exception as e:\n            print(f\"Microphone test failed: {e}\")\n            return False\n","size_bytes":3306},"voice_assistant/tts_handler.py":{"content":"\"\"\"\nText-to-Speech Handler Module\nHandles text-to-speech functionality using pyttsx3\n\"\"\"\n\nimport pyttsx3\nimport threading\nimport queue\n\nclass TTSHandler:\n    def __init__(self):\n        \"\"\"Initialize the text-to-speech engine\"\"\"\n        try:\n            self.engine = pyttsx3.init()\n            self.setup_voice()\n            self.speech_queue = queue.Queue()\n            self.is_speaking = False\n            \n        except Exception as e:\n            print(f\"Error initializing TTS engine: {e}\")\n            raise\n    \n    def setup_voice(self):\n        \"\"\"Configure voice properties\"\"\"\n        try:\n            # Get available voices\n            voices = self.engine.getProperty('voices')\n            \n            # Set voice (prefer female voice if available)\n            if voices:\n                for voice in voices:\n                    if 'female' in voice.name.lower() or 'zira' in voice.name.lower():\n                        self.engine.setProperty('voice', voice.id)\n                        break\n                else:\n                    # If no female voice found, use the first available\n                    self.engine.setProperty('voice', voices[0].id)\n            \n            # Set speech rate (words per minute)\n            self.engine.setProperty('rate', 180)\n            \n            # Set volume (0.0 to 1.0)\n            self.engine.setProperty('volume', 0.9)\n            \n            print(\"TTS voice configured successfully\")\n            \n        except Exception as e:\n            print(f\"Error configuring voice: {e}\")\n    \n    def speak(self, text):\n        \"\"\"\n        Convert text to speech\n        \n        Args:\n            text: Text string to convert to speech\n        \"\"\"\n        if not text or not text.strip():\n            return\n            \n        try:\n            # Create a thread for speaking to avoid blocking\n            speech_thread = threading.Thread(target=self._speak_threaded, args=(text,))\n            speech_thread.daemon = True\n            speech_thread.start()\n            \n        except Exception as e:\n            print(f\"Error in text-to-speech: {e}\")\n    \n    def _speak_threaded(self, text):\n        \"\"\"Internal method to handle speech in a separate thread\"\"\"\n        try:\n            self.is_speaking = True\n            print(f\"Speaking: {text}\")\n            \n            self.engine.say(text)\n            self.engine.runAndWait()\n            \n            self.is_speaking = False\n            \n        except Exception as e:\n            print(f\"Error in threaded speech: {e}\")\n            self.is_speaking = False\n    \n    def stop(self):\n        \"\"\"Stop current speech\"\"\"\n        try:\n            self.engine.stop()\n            self.is_speaking = False\n        except Exception as e:\n            print(f\"Error stopping speech: {e}\")\n    \n    def is_busy(self):\n        \"\"\"Check if TTS engine is currently speaking\"\"\"\n        return self.is_speaking\n    \n    def get_voices(self):\n        \"\"\"Get list of available voices\"\"\"\n        try:\n            voices = self.engine.getProperty('voices')\n            voice_list = []\n            for voice in voices:\n                voice_info = {\n                    'id': voice.id,\n                    'name': voice.name,\n                    'age': getattr(voice, 'age', 'Unknown'),\n                    'gender': getattr(voice, 'gender', 'Unknown')\n                }\n                voice_list.append(voice_info)\n            return voice_list\n        except Exception as e:\n            print(f\"Error getting voices: {e}\")\n            return []\n    \n    def set_voice_by_index(self, index):\n        \"\"\"Set voice by index from available voices\"\"\"\n        try:\n            voices = self.engine.getProperty('voices')\n            if 0 <= index < len(voices):\n                self.engine.setProperty('voice', voices[index].id)\n                return True\n            return False\n        except Exception as e:\n            print(f\"Error setting voice: {e}\")\n            return False\n","size_bytes":3976}}}